name: Go Package Release (Reusable)

on:
    workflow_call:
        inputs:
            package-name:
                description: "Name of the Go package (e.g., package-g)"
                required: true
                type: string
            package-description:
                description: "Short description of the package"
                required: true
                type: string
            package-features:
                description: "Markdown list of package features"
                required: true
                type: string
            usage-examples:
                description: "Markdown usage examples (optional)"
                required: false
                type: string
                default: |
                    ```bash
                    # Run the application
                    ./$PACKAGE_NAME-<platform>
                    ```

# =============================================================================
# CONFIGURATION - Values that may change over time
# =============================================================================
env:
    # Build configuration (customize paths if needed)
    PACKAGES_DIR: "packages"
    RELEASE_DIR: "release"
    DIST_DIR: "dist"
    BUILD_SCRIPT: "build.sh"

# =============================================================================
# IMPLEMENTATION - Stable workflow logic (rarely changes)
# =============================================================================
permissions:
    contents: write

jobs:
    build-and-test:
        name: Build & Test (${{ matrix.target }})
        runs-on: ${{ matrix.os }}
        strategy:
            # =====================================================================
            # CONFIGURATION - Build matrix (add/remove platforms as needed)
            # =====================================================================
            matrix:
                include:
                    # Linux builds
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      goos: linux
                      goarch: amd64
                    - os: ubuntu-latest
                      target: aarch64-unknown-linux-gnu
                      goos: linux
                      goarch: arm64
                    # macOS builds
                    - os: macos-13  # Intel
                      target: x86_64-apple-darwin
                      goos: darwin
                      goarch: amd64
                    - os: macos-latest  # Apple Silicon
                      target: aarch64-apple-darwin
                      goos: darwin
                      goarch: arm64
                    # Windows builds
                    - os: windows-latest
                      target: x86_64-pc-windows-msvc
                      goos: windows
                      goarch: amd64
                    - os: windows-latest
                      target: aarch64-pc-windows-msvc
                      goos: windows
                      goarch: arm64

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            # =====================================================================
            # CONFIGURATION - Go version (update as needed)
            # =====================================================================
            - name: Setup Go
              uses: actions/setup-go@v5
              with:
                  go-version: "1.22"  # CONFIGURATION: Update to desired Go version

            - name: Extract version
              id: version
              shell: bash
              run: echo "VERSION=${GITHUB_REF#refs/tags/${{ inputs.package-name }}@v}" >> $GITHUB_OUTPUT

            - name: Test
              run: |
                  cd ${{ env.PACKAGES_DIR }}/${{ inputs.package-name }}
                  go test -v -race -coverprofile=coverage.out ./...

            - name: Build with script
              shell: bash
              run: |
                  cd ${{ env.PACKAGES_DIR }}/${{ inputs.package-name }}
                  chmod +x ${{ env.BUILD_SCRIPT }}
                  ./${{ env.BUILD_SCRIPT }}

            - name: Upload release artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ inputs.package-name }}-${{ matrix.target }}
                  path: |
                      ${{ env.PACKAGES_DIR }}/${{ inputs.package-name }}/${{ env.RELEASE_DIR }}/${{ inputs.package-name }}-${{ matrix.target }}*

    publish:
        name: Publish Go Package
        needs: build-and-test
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Extract version
              id: version
              run: echo "VERSION=${GITHUB_REF#refs/tags/${{ inputs.package-name }}@v}" >> $GITHUB_OUTPUT

            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: ${{ env.DIST_DIR }}/

            - name: Organize release files
              run: |
                  mkdir -p ${{ env.RELEASE_DIR }}
                  find ${{ env.DIST_DIR }} -type f -exec mv {} ${{ env.RELEASE_DIR }}/ \;
                  ls -lh ${{ env.RELEASE_DIR }}/

            # =========================================================================
            # CONFIGURATION - Release body template (customize as needed)
            # =========================================================================
            - name: Create GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ github.ref_name }}
                  name: ${{ inputs.package-name }} v${{ steps.version.outputs.VERSION }}
                  body: |
                      ## ${{ inputs.package-name }} v${{ steps.version.outputs.VERSION }}

                      ${{ inputs.package-description }}

                      ### Features
                      ${{ inputs.package-features }}

                      ### Downloads

                      | Platform | Architecture | Archive |
                      |----------|--------------|---------|
                      | Linux | x86_64 | `${{ inputs.package-name }}-x86_64-unknown-linux-gnu.tar.gz` |
                      | Linux | aarch64 (ARM64) | `${{ inputs.package-name }}-aarch64-unknown-linux-gnu.tar.gz` |
                      | macOS | x86_64 (Intel) | `${{ inputs.package-name }}-x86_64-apple-darwin.tar.gz` |
                      | macOS | aarch64 (Apple Silicon) | `${{ inputs.package-name }}-aarch64-apple-darwin.tar.gz` |
                      | Windows | x86_64 | `${{ inputs.package-name }}-x86_64-pc-windows-msvc.zip` |
                      | Windows | aarch64 (ARM64) | `${{ inputs.package-name }}-aarch64-pc-windows-msvc.zip` |

                      ### Verification

                      Verify integrity with SHA256 checksums:
                      ```bash
                      sha256sum -c ${{ inputs.package-name }}-<platform>.tar.gz.sha256
                      ```

                      ### Installation
                      ```bash
                      # Linux/macOS
                      tar -xzf ${{ inputs.package-name }}-<platform>.tar.gz
                      sudo mv ${{ inputs.package-name }}-<platform> /usr/local/bin/${{ inputs.package-name }}

                      # Windows
                      unzip ${{ inputs.package-name }}-<platform>.zip
                      # Add to PATH
                      ```

                      ### Usage

                      ${{ inputs.usage-examples }}
                  files: |
                      ${{ env.RELEASE_DIR }}/*
                  # CONFIGURATION: Change to true for manual approval before publishing
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
