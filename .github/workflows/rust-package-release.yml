name: Rust Package Release (Reusable)

on:
    workflow_call:
        inputs:
            package-name:
                description: 'Name of the Rust package (e.g., package-e)'
                required: true
                type: string
            package-description:
                description: 'Short description of the package'
                required: true
                type: string
            package-features:
                description: 'Markdown list of package features'
                required: true
                type: string
            usage-examples:
                description: 'Markdown usage examples (optional)'
                required: false
                type: string
                default: |
                    ```bash
                    # Run the application
                    ./$PACKAGE_NAME-<platform>
                    ```

permissions:
    contents: write

jobs:
    build-and-test:
        name: Build & Test (${{ matrix.target }})
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                include:
                    # Linux builds
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                    - os: ubuntu-latest
                      target: aarch64-unknown-linux-gnu
                    # macOS builds
                    - os: macos-13
                      target: x86_64-apple-darwin
                    - os: macos-latest
                      target: aarch64-apple-darwin
                    # Windows builds
                    - os: windows-latest
                      target: x86_64-pc-windows-msvc
                    - os: windows-latest
                      target: aarch64-pc-windows-msvc

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Rust
              uses: actions-rust-lang/setup-rust-toolchain@v1
              with:
                  toolchain: stable
                  target: ${{ matrix.target }}

            - name: Extract version
              id: version
              shell: bash
              run: echo "VERSION=${GITHUB_REF#refs/tags/${{ inputs.package-name }}@v}" >> $GITHUB_OUTPUT

            - name: Build with build script
              shell: bash
              run: |
                  cd packages/${{ inputs.package-name }}
                  chmod +x build.sh
                  ./build.sh

            - name: Test binary
              shell: bash
              run: |
                  cd packages/${{ inputs.package-name }}
                  if [ -f "release/${{ inputs.package-name }}-${{ matrix.target }}.exe" ]; then
                    ./release/${{ inputs.package-name }}-${{ matrix.target }}.exe || echo "Binary executed"
                  else
                    ./release/${{ inputs.package-name }}-${{ matrix.target }} || echo "Binary executed"
                  fi

            - name: Upload release artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ inputs.package-name }}-${{ matrix.target }}
                  path: |
                      packages/${{ inputs.package-name }}/release/${{ inputs.package-name }}-${{ matrix.target }}*

    publish:
        name: Publish Rust Package
        needs: build-and-test
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Extract version
              id: version
              run: echo "VERSION=${GITHUB_REF#refs/tags/${{ inputs.package-name }}@v}" >> $GITHUB_OUTPUT

            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: dist/

            - name: Organize release files
              run: |
                  mkdir -p release
                  find dist -type f -exec mv {} release/ \;
                  ls -lh release/

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ github.ref_name }}
                  name: ${{ inputs.package-name }} v${{ steps.version.outputs.VERSION }}
                  body: |
                      ## ${{ inputs.package-name }} v${{ steps.version.outputs.VERSION }}
                      
                      ${{ inputs.package-description }}
                      
                      ### Features
                      ${{ inputs.package-features }}
                      
                      ### Downloads
                      
                      | Platform | Architecture | Archive |
                      |----------|--------------|---------|
                      | Linux | x86_64 | `${{ inputs.package-name }}-x86_64-unknown-linux-gnu.tar.gz` |
                      | Linux | aarch64 (ARM64) | `${{ inputs.package-name }}-aarch64-unknown-linux-gnu.tar.gz` |
                      | macOS | x86_64 (Intel) | `${{ inputs.package-name }}-x86_64-apple-darwin.tar.gz` |
                      | macOS | aarch64 (Apple Silicon) | `${{ inputs.package-name }}-aarch64-apple-darwin.tar.gz` |
                      | Windows | x86_64 | `${{ inputs.package-name }}-x86_64-pc-windows-msvc.zip` |
                      | Windows | aarch64 (ARM64) | `${{ inputs.package-name }}-aarch64-pc-windows-msvc.zip` |
                      
                      ### Verification
                      
                      All downloads include SHA256 checksums for verification:
                      ```bash
                      # Linux/macOS
                      sha256sum -c ${{ inputs.package-name }}-<platform>.tar.gz.sha256
                      
                      # Windows
                      CertUtil -hashfile ${{ inputs.package-name }}-<platform>.zip SHA256
                      ```
                      
                      ### Usage
                      
                      ${{ inputs.usage-examples }}
                  files: |
                      release/*
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
