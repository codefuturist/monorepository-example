name: Python Binaries

on:
    push:
        tags:
            - "package-a@v*.*.*"
            - "package-b@v*.*.*"
            - "package-c@v*.*.*"

permissions:
    contents: write

jobs:
    build-binaries:
        name: Build Binary (${{ matrix.target }})
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                include:
                    # Linux builds
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      platform: linux
                      arch: x86_64
                    - os: ubuntu-latest
                      target: aarch64-unknown-linux-gnu
                      platform: linux
                      arch: aarch64
                    # macOS builds
                    - os: macos-13
                      target: x86_64-apple-darwin
                      platform: macos
                      arch: x86_64
                    - os: macos-latest
                      target: aarch64-apple-darwin
                      platform: macos
                      arch: arm64
                    # Windows builds
                    - os: windows-latest
                      target: x86_64-pc-windows-msvc
                      platform: windows
                      arch: x86_64
                    - os: windows-latest
                      target: aarch64-pc-windows-msvc
                      platform: windows
                      arch: arm64

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Python
              uses: actions/setup-python@v5
              with:
                  python-version: '3.12'

            - name: Extract package info
              id: pkg_info
              shell: bash
              run: |
                  TAG=${GITHUB_REF#refs/tags/}
                  PACKAGE=$(echo $TAG | cut -d'@' -f1)
                  VERSION=$(echo $TAG | cut -d'@' -f2 | sed 's/^v//')
                  echo "package=$PACKAGE" >> $GITHUB_OUTPUT
                  echo "version=$VERSION" >> $GITHUB_OUTPUT
                  echo "tag=$TAG" >> $GITHUB_OUTPUT

            - name: Install dependencies
              shell: bash
              run: |
                  python -m pip install --upgrade pip
                  pip install pyinstaller

            - name: Build binary (Linux ARM64)
              if: matrix.platform == 'linux' && matrix.arch == 'aarch64'
              run: |
                  # Cross-compilation for ARM64 on x86_64
                  sudo apt-get update
                  sudo apt-get install -y gcc-aarch64-linux-gnu
                  cd packages/${{ steps.pkg_info.outputs.package }}
                  pip install -e .
                  chmod +x build.sh
                  # Note: PyInstaller doesn't support cross-compilation well
                  # This would need to run on actual ARM64 hardware or use docker/qemu
                  echo "Skipping ARM64 build - requires native hardware"
              continue-on-error: true

            - name: Build binary (Native)
              if: matrix.arch != 'aarch64' || matrix.platform != 'linux'
              shell: bash
              run: |
                  cd packages/${{ steps.pkg_info.outputs.package }}
                  pip install -e .
                  chmod +x build.sh 2>/dev/null || true
                  ./build.sh

            - name: Upload artifacts
              if: matrix.arch != 'aarch64' || matrix.platform != 'linux'
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ steps.pkg_info.outputs.package }}-${{ matrix.target }}
                  path: |
                      packages/${{ steps.pkg_info.outputs.package }}/release/*

    publish:
        name: Publish Python Binaries
        needs: build-binaries
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Extract package info
              id: pkg_info
              run: |
                  TAG=${GITHUB_REF#refs/tags/}
                  PACKAGE=$(echo $TAG | cut -d'@' -f1)
                  VERSION=$(echo $TAG | cut -d'@' -f2 | sed 's/^v//')
                  echo "package=$PACKAGE" >> $GITHUB_OUTPUT
                  echo "version=$VERSION" >> $GITHUB_OUTPUT

            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: dist/

            - name: Organize release files
              run: |
                  mkdir -p release
                  find dist -type f -exec mv {} release/ \;
                  ls -lh release/

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ github.ref_name }}
                  name: ${{ steps.pkg_info.outputs.package }} v${{ steps.pkg_info.outputs.version }}
                  body: |
                      ## ${{ steps.pkg_info.outputs.package }} v${{ steps.pkg_info.outputs.version }}
                      
                      Python standalone binaries for multiple platforms.
                      
                      ### Downloads
                      
                      | Platform | Architecture | Archive |
                      |----------|--------------|---------|
                      | Linux | x86_64 | `${{ steps.pkg_info.outputs.package }}-x86_64-unknown-linux-gnu.tar.gz` |
                      | macOS | x86_64 (Intel) | `${{ steps.pkg_info.outputs.package }}-x86_64-apple-darwin.tar.gz` |
                      | macOS | aarch64 (Apple Silicon) | `${{ steps.pkg_info.outputs.package }}-aarch64-apple-darwin.tar.gz` |
                      | Windows | x86_64 | `${{ steps.pkg_info.outputs.package }}-x86_64-pc-windows-msvc.zip` |
                      | Windows | aarch64 (ARM64) | `${{ steps.pkg_info.outputs.package }}-aarch64-pc-windows-msvc.zip` |
                      
                      ### Verification
                      
                      All downloads include SHA256 checksums:
                      ```bash
                      # Linux/macOS
                      sha256sum -c ${{ steps.pkg_info.outputs.package }}-<platform>.tar.gz.sha256
                      
                      # Windows
                      CertUtil -hashfile ${{ steps.pkg_info.outputs.package }}-<platform>.zip SHA256
                      ```
                      
                      ### Installation
                      ```bash
                      # Linux/macOS
                      tar -xzf ${{ steps.pkg_info.outputs.package }}-<platform>.tar.gz
                      sudo mv ${{ steps.pkg_info.outputs.package }}-<platform> /usr/local/bin/${{ steps.pkg_info.outputs.package }}
                      
                      # Windows
                      unzip ${{ steps.pkg_info.outputs.package }}-<platform>.zip
                      # Add to PATH
                      ```
                      
                      ### Usage
                      ```bash
                      ${{ steps.pkg_info.outputs.package }}-<platform>
                      ```
                  files: |
                      release/*
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
