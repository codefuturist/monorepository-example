name: Python Package Release (Reusable)

on:
  workflow_call:
    inputs:
      package-name:
        description: "Name of the Python package (e.g., package-a)"
        required: true
        type: string
      package-description:
        description: "Short description of the package"
        required: true
        type: string
      package-features:
        description: "Markdown list of package features"
        required: false
        type: string
        default: ""
      usage-examples:
        description: "Markdown usage examples (optional)"
        required: false
        type: string
        default: |
          ```bash
          # Run the application
          ./$PACKAGE_NAME-<platform>
          ```

# =============================================================================
# CONFIGURATION - Values that may change over time
# =============================================================================
env:
  # Build configuration (customize paths if needed)
  PACKAGES_DIR: "packages"
  RELEASE_DIR: "release"
  DIST_DIR: "dist"
  BUILD_SCRIPT: "build.sh"

# =============================================================================
# IMPLEMENTATION - Stable workflow logic (rarely changes)
# =============================================================================
permissions:
  contents: write

jobs:
  build-and-test:
    name: Build Binary (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      # =====================================================================
      # CONFIGURATION - Build matrix (add/remove platforms as needed)
      # =====================================================================
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux
            arch: x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: linux
            arch: aarch64
          # macOS builds
          - os: macos-13 # Intel
            target: x86_64-apple-darwin
            platform: macos
            arch: x86_64
          - os: macos-latest # Apple Silicon
            target: aarch64-apple-darwin
            platform: macos
            arch: arm64
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows
            arch: x86_64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            platform: windows
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # =====================================================================
      # CONFIGURATION - Python version (update as needed)
      # =====================================================================
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12" # CONFIGURATION: Update Python version as needed

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "${{ env.PACKAGES_DIR }}/${{ inputs.package-name }}/pyproject.toml"

      - name: Extract version
        id: version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/${{ inputs.package-name }}@v}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        shell: bash
        run: |
          uv pip install --system pyinstaller

      - name: Build binary (Linux ARM64)
        if: matrix.platform == 'linux' && matrix.arch == 'aarch64'
        run: |
          # PyInstaller doesn't support cross-compilation well
          # This would need to run on actual ARM64 hardware or use docker/qemu
          echo "Skipping ARM64 build - requires native hardware"
          echo "Note: PyInstaller can only build for the host platform"
        continue-on-error: true

      - name: Build binary (Native)
        if: matrix.arch != 'aarch64' || matrix.platform != 'linux'
        shell: bash
        run: |
          cd ${{ env.PACKAGES_DIR }}/${{ inputs.package-name }}
          uv pip install --system -e .
          chmod +x ${{ env.BUILD_SCRIPT }} 2>/dev/null || true
          ./${{ env.BUILD_SCRIPT }}

      - name: Test binary
        if: matrix.arch != 'aarch64' || matrix.platform != 'linux'
        shell: bash
        run: |
          cd ${{ env.PACKAGES_DIR }}/${{ inputs.package-name }}
          if [ -f "${{ env.RELEASE_DIR }}/${{ inputs.package-name }}-${{ matrix.target }}.exe" ]; then
            ./${{ env.RELEASE_DIR }}/${{ inputs.package-name }}-${{ matrix.target }}.exe || echo "Binary executed"
          else
            ./${{ env.RELEASE_DIR }}/${{ inputs.package-name }}-${{ matrix.target }} || echo "Binary executed"
          fi

      - name: Upload release artifacts
        if: matrix.arch != 'aarch64' || matrix.platform != 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.package-name }}-${{ matrix.target }}
          path: |
            ${{ env.PACKAGES_DIR }}/${{ inputs.package-name }}/${{ env.RELEASE_DIR }}/*

  publish:
    name: Publish Python Package
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/${{ inputs.package-name }}@v}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.DIST_DIR }}/

      - name: Organize release files
        run: |
          mkdir -p ${{ env.RELEASE_DIR }}
          find ${{ env.DIST_DIR }} -type f -exec mv {} ${{ env.RELEASE_DIR }}/ \;
          ls -lh ${{ env.RELEASE_DIR }}/

      # =========================================================================
      # CONFIGURATION - Release body template (customize as needed)
      # =========================================================================
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ inputs.package-name }} v${{ steps.version.outputs.VERSION }}
          body: |
            ## ${{ inputs.package-name }} v${{ steps.version.outputs.VERSION }}

            ${{ inputs.package-description }}

            ### Features

            ${{ inputs.package-features }}

            ### Downloads

            | Platform | Architecture | Archive |
            |----------|--------------|---------|
            | Linux | x86_64 | `${{ inputs.package-name }}-x86_64-unknown-linux-gnu.tar.gz` |
            | macOS | x86_64 (Intel) | `${{ inputs.package-name }}-x86_64-apple-darwin.tar.gz` |
            | macOS | aarch64 (Apple Silicon) | `${{ inputs.package-name }}-aarch64-apple-darwin.tar.gz` |
            | Windows | x86_64 | `${{ inputs.package-name }}-x86_64-pc-windows-msvc.zip` |
            | Windows | aarch64 (ARM64) | `${{ inputs.package-name }}-aarch64-pc-windows-msvc.zip` |

            > **Note:** Linux ARM64 (aarch64) builds are not available due to PyInstaller cross-compilation limitations.

            ### Verification

            All downloads include SHA256 checksums:
            ```bash
            # Linux/macOS
            sha256sum -c ${{ inputs.package-name }}-<platform>.tar.gz.sha256

            # Windows (PowerShell)
            CertUtil -hashfile ${{ inputs.package-name }}-<platform>.zip SHA256
            ```

            ### Installation

            ```bash
            # Linux/macOS
            tar -xzf ${{ inputs.package-name }}-<platform>.tar.gz
            sudo mv ${{ inputs.package-name }}-<platform> /usr/local/bin/${{ inputs.package-name }}

            # Windows
            # Extract ZIP and add to PATH
            ```

            ### Usage

            ${{ inputs.usage-examples }}

            ---

            **Package:** `${{ inputs.package-name }}`
            **Version:** `${{ steps.version.outputs.VERSION }}`
            **Built with:** Python 3.12 + PyInstaller
          files: |
            ${{ env.RELEASE_DIR }}/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
